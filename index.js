const {
  Client,
  GatewayIntentBits,
  ActionRowBuilder,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle,
  ButtonBuilder,
  ButtonStyle,
  Events,
} = require("discord.js");
require("dotenv").config();

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

client.once("ready", () => {
  console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
});

client.on(Events.InteractionCreate, async (interaction) => {
  if (interaction.isButton()) {
    if (interaction.customId === "apply_button") {
      // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      const modal = new ModalBuilder()
        .setCustomId("application_form")
        .setTitle("–ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");

      const nicknameInput = new TextInputBuilder()
        .setCustomId("nickname")
        .setLabel("–í–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ")
        .setStyle(TextInputStyle.Short);

      const goalsInput = new TextInputBuilder()
        .setCustomId("goals")
        .setLabel("–ö–∞–∫–∏–µ –≤–∞—à–∏ —Ü–µ–ª–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ")
        .setStyle(TextInputStyle.Paragraph);

      const timeInput = new TextInputBuilder()
        .setCustomId("time")
        .setLabel("–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä—É?")
        .setStyle(TextInputStyle.Short);

      const sourceInput = new TextInputBuilder()
        .setCustomId("source")
        .setLabel("–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?")
        .setStyle(TextInputStyle.Short);

      const aboutInput = new TextInputBuilder()
        .setCustomId("about")
        .setLabel("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ")
        .setStyle(TextInputStyle.Paragraph);

      modal.addComponents(
        new ActionRowBuilder().addComponents(nicknameInput),
        new ActionRowBuilder().addComponents(goalsInput),
        new ActionRowBuilder().addComponents(timeInput),
        new ActionRowBuilder().addComponents(sourceInput),
        new ActionRowBuilder().addComponents(aboutInput)
      );

      await interaction.showModal(modal);
    }
  }

  if (interaction.isModalSubmit()) {
    if (interaction.customId === "application_form") {
      const nickname = interaction.fields.getTextInputValue("nickname");
      const goals = interaction.fields.getTextInputValue("goals");
      const time = interaction.fields.getTextInputValue("time");
      const source = interaction.fields.getTextInputValue("source");
      const about = interaction.fields.getTextInputValue("about");
      const userTag = interaction.user.tag; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

      const channel = client.channels.cache.get("1275002461190488118");
      const message = await channel.send({
        content:
          `**üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @${userTag}:**\n\n` +
          `**üìå –ù–∏–∫–Ω–µ–π–º**: ${nickname}\n` +
          `**üéØ –¶–µ–ª–∏**: ${goals}\n` +
          `**‚è≥ –í—Ä–µ–º—è**: ${time}\n` +
          `**üîç –ò—Å—Ç–æ—á–Ω–∏–∫**: ${source}\n` +
          `**üó£ –û —Å–µ–±–µ**: ${about}\n\n` +
          `**‚ùì –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∑–∞—è–≤–∫–æ–π?**`,
        components: [
          new ActionRowBuilder().addComponents(
            new ButtonBuilder()
              .setCustomId("approve")
              .setLabel("–û–¥–æ–±—Ä–∏—Ç—å")
              .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
              .setCustomId("decline")
              .setLabel("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
              .setStyle(ButtonStyle.Danger)
          ),
        ],
      });

      await interaction.reply({
        content: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
        ephemeral: true,
      });

      // –°–ª—É—à–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ "–û–¥–æ–±—Ä–∏—Ç—å" –∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
      const collector = channel.createMessageComponentCollector();

      collector.on("collect", async (buttonInteraction) => {
        const userTag = interaction.user.tag; // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const nickname = interaction.fields.getTextInputValue("nickname");
        const goals = interaction.fields.getTextInputValue("goals");
        const time = interaction.fields.getTextInputValue("time");
        const source = interaction.fields.getTextInputValue("source");
        const about = interaction.fields.getTextInputValue("about");

        if (buttonInteraction.customId === "approve") {
          // –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
          const user = await client.users.fetch(interaction.user.id);
          await user.send("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!");

          const member = await interaction.guild.members.fetch(
            interaction.user.id
          );

          // –†–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏ –∏ —Å–Ω—è—Ç–∏—è
          const roleToAdd = interaction.guild.roles.cache.get(
            "1264317583650324583"
          ); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Ä–æ–ª–∏ –¥–ª—è –≤—ã–¥–∞—á–∏
          const roleToRemove = interaction.guild.roles.cache.get(
            "1303765683703910501"
          ); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID —Ä–æ–ª–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è

          if (roleToAdd) await member.roles.add(roleToAdd);
          if (roleToRemove) await member.roles.remove(roleToRemove);

          // –õ–æ–≥ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          await buttonInteraction.update({
            content:
              `**‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!**\n\n` +
              `**–ò–≥—Ä–æ–∫**: @${userTag}\n\n` +
              `**üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:**\n` +
              `\`\`\`diff\n` +
              `+ –ù–∏–∫–Ω–µ–π–º: ${nickname}\n` +
              `+ –¶–µ–ª–∏: ${goals}\n` +
              `+ –í—Ä–µ–º—è: ${time}\n` +
              `+ –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}\n` +
              `+ –û —Å–µ–±–µ: ${about}\n` +
              `\`\`\`\n` +
              `üéâ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –∏ —Å—Ç–∞—Ä–∞—è —Ä–æ–ª—å —Å–Ω—è—Ç–∞.`,
            components: [],
          });
        } else if (buttonInteraction.customId === "decline") {
          // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
          const user = await client.users.fetch(interaction.user.id);
          await user.send("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");

          // –õ–æ–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
          await buttonInteraction.update({
            content:
              `**‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**\n\n` +
              `**–ò–≥—Ä–æ–∫**: @${userTag}\n\n` +
              `**üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:**\n` +
              `\`\`\`diff\n` +
              `- –ù–∏–∫–Ω–µ–π–º: ${nickname}\n` +
              `- –¶–µ–ª–∏: ${goals}\n` +
              `- –í—Ä–µ–º—è: ${time}\n` +
              `- –ò—Å—Ç–æ—á–Ω–∏–∫: ${source}\n` +
              `- –û —Å–µ–±–µ: ${about}\n` +
              `\`\`\`\n` +
              `üëã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞.`,
            components: [],
          });
        }
      });
    }
  }
});

// –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
client.on(Events.InteractionCreate, async (interaction) => {
  if (interaction.commandName === "start") {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (!interaction.member.permissions.has("ADMINISTRATOR")) {
      return interaction.reply({
        content:
          "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
        ephemeral: true,
      });
    }

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    await interaction.reply({
      content: "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.",
      components: [
        new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("apply_button")
            .setLabel("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
            .setStyle(ButtonStyle.Primary)
        ),
      ],
    });
  }
});

client.login(process.env.TOKEN);
